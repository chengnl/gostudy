// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package config

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"vrv/im/service/vrv"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vrv.GoUnusedProtection__

type ConfigService interface {
	vrv.VRVService

	// ********************************注册服务方法******************************************
	// 各服务初次启动，注册服务信息到配置服务（后续每隔1秒维持心跳）。
	// 参数：ServiceConfigBean：服务配置信息
	// 返回：ServiceConfigResult
	// 判断有没有该服务实例，如果没有存储之，返回服务信息的主备属性和服务唯一标识
	// 如果有踢掉原来的服务信息，再在相同的服务中决定主备属性,返回服务信息的主备属性和服务唯一标识
	//
	//
	// Parameters:
	//  - Config
	RegisterService(config *ServiceConfigBean) (r *ServiceConfigResult_, err error)
	// ********************************服务心跳******************************************
	// 启动服务后，维持心跳，标识服务可用
	// 参数：服务唯一标识
	// 返回：byte，1:主机 2:备机 3:重新注册 5:被踢
	//                  根据参数检测服务，判断服务列表是否有没有该实例服务
	//                    |                                                            |
	//                有|                                                        无|
	//         返回主备属性或者是否被踢           返回提醒重新注册
	// ---------------------------------------------------------------------------------------
	// 如果返回提醒重新注册，服务那边就需要重新调用注册方法
	// 如果返回被踢,停止服务
	//
	//
	// Parameters:
	//  - ID
	ServiceHeart(ID string) (r int8, err error)
	// ***************************提供给voa获取正常状态服务************************************
	// voa加载服务使用，定时每隔1秒调用一次。
	// 参数：无
	// 返回：无
	// 返回服务信息列表  过滤被踢服务
	LoadServices() (r []*ServiceConfigBean, err error)
	// ***************************提供给路由服务器查询聊天服务器用************************************
	// 服务查询，定时每隔1秒调用一次。
	// 参数：无
	// 返回：无
	// 返回服务信息列表  过滤被踢服务
	//
	// Parameters:
	//  - ServiceID
	//  - Version
	QueryService(serviceID string, version string) (r []*ServiceConfigBean, err error)
}

type ConfigServiceClient struct {
	*vrv.VRVServiceClient
}

func NewConfigServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ConfigServiceClient {
	return &ConfigServiceClient{VRVServiceClient: vrv.NewVRVServiceClientFactory(t, f)}
}

func NewConfigServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ConfigServiceClient {
	return &ConfigServiceClient{VRVServiceClient: vrv.NewVRVServiceClientProtocol(t, iprot, oprot)}
}

// ********************************注册服务方法******************************************
// 各服务初次启动，注册服务信息到配置服务（后续每隔1秒维持心跳）。
// 参数：ServiceConfigBean：服务配置信息
// 返回：ServiceConfigResult
// 判断有没有该服务实例，如果没有存储之，返回服务信息的主备属性和服务唯一标识
// 如果有踢掉原来的服务信息，再在相同的服务中决定主备属性,返回服务信息的主备属性和服务唯一标识
//
//
// Parameters:
//  - Config
func (p *ConfigServiceClient) RegisterService(config *ServiceConfigBean) (r *ServiceConfigResult_, err error) {
	if err = p.sendRegisterService(config); err != nil {
		return
	}
	return p.recvRegisterService()
}

func (p *ConfigServiceClient) sendRegisterService(config *ServiceConfigBean) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerService", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ConfigServiceRegisterServiceArgs{
		Config: config,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConfigServiceClient) recvRegisterService() (value *ServiceConfigResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "registerService" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "registerService failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerService failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "registerService failed: invalid message type")
		return
	}
	result := ConfigServiceRegisterServiceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********************************服务心跳******************************************
// 启动服务后，维持心跳，标识服务可用
// 参数：服务唯一标识
// 返回：byte，1:主机 2:备机 3:重新注册 5:被踢
//                  根据参数检测服务，判断服务列表是否有没有该实例服务
//                    |                                                            |
//                有|                                                        无|
//         返回主备属性或者是否被踢           返回提醒重新注册
// ---------------------------------------------------------------------------------------
// 如果返回提醒重新注册，服务那边就需要重新调用注册方法
// 如果返回被踢,停止服务
//
//
// Parameters:
//  - ID
func (p *ConfigServiceClient) ServiceHeart(ID string) (r int8, err error) {
	if err = p.sendServiceHeart(ID); err != nil {
		return
	}
	return p.recvServiceHeart()
}

func (p *ConfigServiceClient) sendServiceHeart(ID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("serviceHeart", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ConfigServiceServiceHeartArgs{
		ID: ID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConfigServiceClient) recvServiceHeart() (value int8, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "serviceHeart" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "serviceHeart failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "serviceHeart failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "serviceHeart failed: invalid message type")
		return
	}
	result := ConfigServiceServiceHeartResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ***************************提供给voa获取正常状态服务************************************
// voa加载服务使用，定时每隔1秒调用一次。
// 参数：无
// 返回：无
// 返回服务信息列表  过滤被踢服务
func (p *ConfigServiceClient) LoadServices() (r []*ServiceConfigBean, err error) {
	if err = p.sendLoadServices(); err != nil {
		return
	}
	return p.recvLoadServices()
}

func (p *ConfigServiceClient) sendLoadServices() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("loadServices", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ConfigServiceLoadServicesArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConfigServiceClient) recvLoadServices() (value []*ServiceConfigBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "loadServices" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "loadServices failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "loadServices failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "loadServices failed: invalid message type")
		return
	}
	result := ConfigServiceLoadServicesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ***************************提供给路由服务器查询聊天服务器用************************************
// 服务查询，定时每隔1秒调用一次。
// 参数：无
// 返回：无
// 返回服务信息列表  过滤被踢服务
//
// Parameters:
//  - ServiceID
//  - Version
func (p *ConfigServiceClient) QueryService(serviceID string, version string) (r []*ServiceConfigBean, err error) {
	if err = p.sendQueryService(serviceID, version); err != nil {
		return
	}
	return p.recvQueryService()
}

func (p *ConfigServiceClient) sendQueryService(serviceID string, version string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("queryService", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ConfigServiceQueryServiceArgs{
		ServiceID: serviceID,
		Version:   version,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ConfigServiceClient) recvQueryService() (value []*ServiceConfigBean, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "queryService" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "queryService failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "queryService failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "queryService failed: invalid message type")
		return
	}
	result := ConfigServiceQueryServiceResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ConfigServiceProcessor struct {
	*vrv.VRVServiceProcessor
}

func NewConfigServiceProcessor(handler ConfigService) *ConfigServiceProcessor {
	self8 := &ConfigServiceProcessor{vrv.NewVRVServiceProcessor(handler)}
	self8.AddToProcessorMap("registerService", &configServiceProcessorRegisterService{handler: handler})
	self8.AddToProcessorMap("serviceHeart", &configServiceProcessorServiceHeart{handler: handler})
	self8.AddToProcessorMap("loadServices", &configServiceProcessorLoadServices{handler: handler})
	self8.AddToProcessorMap("queryService", &configServiceProcessorQueryService{handler: handler})
	return self8
}

type configServiceProcessorRegisterService struct {
	handler ConfigService
}

func (p *configServiceProcessorRegisterService) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ConfigServiceRegisterServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ConfigServiceRegisterServiceResult{}
	var retval *ServiceConfigResult_
	var err2 error
	if retval, err2 = p.handler.RegisterService(args.Config); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerService: "+err2.Error())
		oprot.WriteMessageBegin("registerService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("registerService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type configServiceProcessorServiceHeart struct {
	handler ConfigService
}

func (p *configServiceProcessorServiceHeart) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ConfigServiceServiceHeartArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("serviceHeart", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ConfigServiceServiceHeartResult{}
	var retval int8
	var err2 error
	if retval, err2 = p.handler.ServiceHeart(args.ID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing serviceHeart: "+err2.Error())
		oprot.WriteMessageBegin("serviceHeart", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("serviceHeart", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type configServiceProcessorLoadServices struct {
	handler ConfigService
}

func (p *configServiceProcessorLoadServices) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ConfigServiceLoadServicesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("loadServices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ConfigServiceLoadServicesResult{}
	var retval []*ServiceConfigBean
	var err2 error
	if retval, err2 = p.handler.LoadServices(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loadServices: "+err2.Error())
		oprot.WriteMessageBegin("loadServices", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("loadServices", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type configServiceProcessorQueryService struct {
	handler ConfigService
}

func (p *configServiceProcessorQueryService) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ConfigServiceQueryServiceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("queryService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ConfigServiceQueryServiceResult{}
	var retval []*ServiceConfigBean
	var err2 error
	if retval, err2 = p.handler.QueryService(args.ServiceID, args.Version); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryService: "+err2.Error())
		oprot.WriteMessageBegin("queryService", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("queryService", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Config
type ConfigServiceRegisterServiceArgs struct {
	Config *ServiceConfigBean `thrift:"config,1" json:"config"`
}

func NewConfigServiceRegisterServiceArgs() *ConfigServiceRegisterServiceArgs {
	return &ConfigServiceRegisterServiceArgs{}
}

var ConfigServiceRegisterServiceArgs_Config_DEFAULT *ServiceConfigBean

func (p *ConfigServiceRegisterServiceArgs) GetConfig() *ServiceConfigBean {
	if !p.IsSetConfig() {
		return ConfigServiceRegisterServiceArgs_Config_DEFAULT
	}
	return p.Config
}
func (p *ConfigServiceRegisterServiceArgs) IsSetConfig() bool {
	return p.Config != nil
}

func (p *ConfigServiceRegisterServiceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceRegisterServiceArgs) readField1(iprot thrift.TProtocol) error {
	p.Config = &ServiceConfigBean{}
	if err := p.Config.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Config), err)
	}
	return nil
}

func (p *ConfigServiceRegisterServiceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerService_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceRegisterServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("config", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:config: ", p), err)
	}
	if err := p.Config.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Config), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:config: ", p), err)
	}
	return err
}

func (p *ConfigServiceRegisterServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceRegisterServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ConfigServiceRegisterServiceResult struct {
	Success *ServiceConfigResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewConfigServiceRegisterServiceResult() *ConfigServiceRegisterServiceResult {
	return &ConfigServiceRegisterServiceResult{}
}

var ConfigServiceRegisterServiceResult_Success_DEFAULT *ServiceConfigResult_

func (p *ConfigServiceRegisterServiceResult) GetSuccess() *ServiceConfigResult_ {
	if !p.IsSetSuccess() {
		return ConfigServiceRegisterServiceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ConfigServiceRegisterServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConfigServiceRegisterServiceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceRegisterServiceResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ServiceConfigResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *ConfigServiceRegisterServiceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerService_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceRegisterServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ConfigServiceRegisterServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceRegisterServiceResult(%+v)", *p)
}

// Attributes:
//  - ID
type ConfigServiceServiceHeartArgs struct {
	ID string `thrift:"ID,1" json:"ID"`
}

func NewConfigServiceServiceHeartArgs() *ConfigServiceServiceHeartArgs {
	return &ConfigServiceServiceHeartArgs{}
}

func (p *ConfigServiceServiceHeartArgs) GetID() string {
	return p.ID
}
func (p *ConfigServiceServiceHeartArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceServiceHeartArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ConfigServiceServiceHeartArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("serviceHeart_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceServiceHeartArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *ConfigServiceServiceHeartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceServiceHeartArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ConfigServiceServiceHeartResult struct {
	Success *int8 `thrift:"success,0" json:"success,omitempty"`
}

func NewConfigServiceServiceHeartResult() *ConfigServiceServiceHeartResult {
	return &ConfigServiceServiceHeartResult{}
}

var ConfigServiceServiceHeartResult_Success_DEFAULT int8

func (p *ConfigServiceServiceHeartResult) GetSuccess() int8 {
	if !p.IsSetSuccess() {
		return ConfigServiceServiceHeartResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ConfigServiceServiceHeartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConfigServiceServiceHeartResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceServiceHeartResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := int8(v)
		p.Success = &temp
	}
	return nil
}

func (p *ConfigServiceServiceHeartResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("serviceHeart_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceServiceHeartResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BYTE, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ConfigServiceServiceHeartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceServiceHeartResult(%+v)", *p)
}

type ConfigServiceLoadServicesArgs struct {
}

func NewConfigServiceLoadServicesArgs() *ConfigServiceLoadServicesArgs {
	return &ConfigServiceLoadServicesArgs{}
}

func (p *ConfigServiceLoadServicesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceLoadServicesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loadServices_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceLoadServicesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceLoadServicesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ConfigServiceLoadServicesResult struct {
	Success []*ServiceConfigBean `thrift:"success,0" json:"success,omitempty"`
}

func NewConfigServiceLoadServicesResult() *ConfigServiceLoadServicesResult {
	return &ConfigServiceLoadServicesResult{}
}

var ConfigServiceLoadServicesResult_Success_DEFAULT []*ServiceConfigBean

func (p *ConfigServiceLoadServicesResult) GetSuccess() []*ServiceConfigBean {
	return p.Success
}
func (p *ConfigServiceLoadServicesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConfigServiceLoadServicesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceLoadServicesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ServiceConfigBean, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &ServiceConfigBean{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Success = append(p.Success, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConfigServiceLoadServicesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("loadServices_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceLoadServicesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ConfigServiceLoadServicesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceLoadServicesResult(%+v)", *p)
}

// Attributes:
//  - ServiceID
//  - Version
type ConfigServiceQueryServiceArgs struct {
	ServiceID string `thrift:"serviceID,1" json:"serviceID"`
	Version   string `thrift:"version,2" json:"version"`
}

func NewConfigServiceQueryServiceArgs() *ConfigServiceQueryServiceArgs {
	return &ConfigServiceQueryServiceArgs{}
}

func (p *ConfigServiceQueryServiceArgs) GetServiceID() string {
	return p.ServiceID
}

func (p *ConfigServiceQueryServiceArgs) GetVersion() string {
	return p.Version
}
func (p *ConfigServiceQueryServiceArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceQueryServiceArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceID = v
	}
	return nil
}

func (p *ConfigServiceQueryServiceArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *ConfigServiceQueryServiceArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryService_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceQueryServiceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceID: ", p), err)
	}
	return err
}

func (p *ConfigServiceQueryServiceArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *ConfigServiceQueryServiceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceQueryServiceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ConfigServiceQueryServiceResult struct {
	Success []*ServiceConfigBean `thrift:"success,0" json:"success,omitempty"`
}

func NewConfigServiceQueryServiceResult() *ConfigServiceQueryServiceResult {
	return &ConfigServiceQueryServiceResult{}
}

var ConfigServiceQueryServiceResult_Success_DEFAULT []*ServiceConfigBean

func (p *ConfigServiceQueryServiceResult) GetSuccess() []*ServiceConfigBean {
	return p.Success
}
func (p *ConfigServiceQueryServiceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ConfigServiceQueryServiceResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConfigServiceQueryServiceResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ServiceConfigBean, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &ServiceConfigBean{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Success = append(p.Success, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConfigServiceQueryServiceResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("queryService_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConfigServiceQueryServiceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ConfigServiceQueryServiceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConfigServiceQueryServiceResult(%+v)", *p)
}
