// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package config

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"vrv/im/service/vrv"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vrv.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - ServiceID
//  - Version
//  - Property
//  - IP
//  - Port
//  - Tactics
//  - Name
//  - Description
//  - Location
//  - InstallTime
//  - OrgID
//  - ServerID
//  - InvalidTime
//  - SSID
type ServiceConfigBean struct {
	ServiceID   string  `thrift:"serviceID,1" json:"serviceID"`
	Version     string  `thrift:"version,2" json:"version"`
	Property    *int8   `thrift:"property,3" json:"property,omitempty"`
	IP          string  `thrift:"ip,4" json:"ip"`
	Port        int32   `thrift:"port,5" json:"port"`
	Tactics     *string `thrift:"tactics,6" json:"tactics,omitempty"`
	Name        *string `thrift:"name,7" json:"name,omitempty"`
	Description *string `thrift:"description,8" json:"description,omitempty"`
	Location    *string `thrift:"location,9" json:"location,omitempty"`
	InstallTime *int64  `thrift:"installTime,10" json:"installTime,omitempty"`
	OrgID       string  `thrift:"orgID,11" json:"orgID"`
	ServerID    *string `thrift:"serverID,12" json:"serverID,omitempty"`
	InvalidTime *int64  `thrift:"invalidTime,13" json:"invalidTime,omitempty"`
	SSID        string  `thrift:"SSID,14" json:"SSID"`
}

func NewServiceConfigBean() *ServiceConfigBean {
	return &ServiceConfigBean{}
}

func (p *ServiceConfigBean) GetServiceID() string {
	return p.ServiceID
}

func (p *ServiceConfigBean) GetVersion() string {
	return p.Version
}

var ServiceConfigBean_Property_DEFAULT int8

func (p *ServiceConfigBean) GetProperty() int8 {
	if !p.IsSetProperty() {
		return ServiceConfigBean_Property_DEFAULT
	}
	return *p.Property
}

func (p *ServiceConfigBean) GetIP() string {
	return p.IP
}

func (p *ServiceConfigBean) GetPort() int32 {
	return p.Port
}

var ServiceConfigBean_Tactics_DEFAULT string

func (p *ServiceConfigBean) GetTactics() string {
	if !p.IsSetTactics() {
		return ServiceConfigBean_Tactics_DEFAULT
	}
	return *p.Tactics
}

var ServiceConfigBean_Name_DEFAULT string

func (p *ServiceConfigBean) GetName() string {
	if !p.IsSetName() {
		return ServiceConfigBean_Name_DEFAULT
	}
	return *p.Name
}

var ServiceConfigBean_Description_DEFAULT string

func (p *ServiceConfigBean) GetDescription() string {
	if !p.IsSetDescription() {
		return ServiceConfigBean_Description_DEFAULT
	}
	return *p.Description
}

var ServiceConfigBean_Location_DEFAULT string

func (p *ServiceConfigBean) GetLocation() string {
	if !p.IsSetLocation() {
		return ServiceConfigBean_Location_DEFAULT
	}
	return *p.Location
}

var ServiceConfigBean_InstallTime_DEFAULT int64

func (p *ServiceConfigBean) GetInstallTime() int64 {
	if !p.IsSetInstallTime() {
		return ServiceConfigBean_InstallTime_DEFAULT
	}
	return *p.InstallTime
}

func (p *ServiceConfigBean) GetOrgID() string {
	return p.OrgID
}

var ServiceConfigBean_ServerID_DEFAULT string

func (p *ServiceConfigBean) GetServerID() string {
	if !p.IsSetServerID() {
		return ServiceConfigBean_ServerID_DEFAULT
	}
	return *p.ServerID
}

var ServiceConfigBean_InvalidTime_DEFAULT int64

func (p *ServiceConfigBean) GetInvalidTime() int64 {
	if !p.IsSetInvalidTime() {
		return ServiceConfigBean_InvalidTime_DEFAULT
	}
	return *p.InvalidTime
}

func (p *ServiceConfigBean) GetSSID() string {
	return p.SSID
}
func (p *ServiceConfigBean) IsSetProperty() bool {
	return p.Property != nil
}

func (p *ServiceConfigBean) IsSetTactics() bool {
	return p.Tactics != nil
}

func (p *ServiceConfigBean) IsSetName() bool {
	return p.Name != nil
}

func (p *ServiceConfigBean) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ServiceConfigBean) IsSetLocation() bool {
	return p.Location != nil
}

func (p *ServiceConfigBean) IsSetInstallTime() bool {
	return p.InstallTime != nil
}

func (p *ServiceConfigBean) IsSetServerID() bool {
	return p.ServerID != nil
}

func (p *ServiceConfigBean) IsSetInvalidTime() bool {
	return p.InvalidTime != nil
}

func (p *ServiceConfigBean) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceConfigBean) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ServiceID = v
	}
	return nil
}

func (p *ServiceConfigBean) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *ServiceConfigBean) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Property = &temp
	}
	return nil
}

func (p *ServiceConfigBean) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.IP = v
	}
	return nil
}

func (p *ServiceConfigBean) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *ServiceConfigBean) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Tactics = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Name = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Description = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Location = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.InstallTime = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.OrgID = v
	}
	return nil
}

func (p *ServiceConfigBean) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.ServerID = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		p.InvalidTime = &v
	}
	return nil
}

func (p *ServiceConfigBean) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.SSID = v
	}
	return nil
}

func (p *ServiceConfigBean) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceConfigBean"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceConfigBean) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("serviceID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ServiceID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.serviceID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceID: ", p), err)
	}
	return err
}

func (p *ServiceConfigBean) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *ServiceConfigBean) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetProperty() {
		if err := oprot.WriteFieldBegin("property", thrift.BYTE, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:property: ", p), err)
		}
		if err := oprot.WriteByte(int8(*p.Property)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.property (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:property: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ip: ", p), err)
	}
	if err := oprot.WriteString(string(p.IP)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ip (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ip: ", p), err)
	}
	return err
}

func (p *ServiceConfigBean) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:port: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.port (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:port: ", p), err)
	}
	return err
}

func (p *ServiceConfigBean) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTactics() {
		if err := oprot.WriteFieldBegin("tactics", thrift.STRING, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:tactics: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Tactics)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.tactics (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:tactics: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err := oprot.WriteFieldBegin("name", thrift.STRING, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:name: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Name)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.name (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:name: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err := oprot.WriteFieldBegin("description", thrift.STRING, 8); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:description: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Description)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.description (8) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 8:description: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLocation() {
		if err := oprot.WriteFieldBegin("location", thrift.STRING, 9); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:location: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Location)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.location (9) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 9:location: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetInstallTime() {
		if err := oprot.WriteFieldBegin("installTime", thrift.I64, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:installTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.InstallTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.installTime (10) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:installTime: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("orgID", thrift.STRING, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:orgID: ", p), err)
	}
	if err := oprot.WriteString(string(p.OrgID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.orgID (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:orgID: ", p), err)
	}
	return err
}

func (p *ServiceConfigBean) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetServerID() {
		if err := oprot.WriteFieldBegin("serverID", thrift.STRING, 12); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serverID: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ServerID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.serverID (12) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serverID: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetInvalidTime() {
		if err := oprot.WriteFieldBegin("invalidTime", thrift.I64, 13); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:invalidTime: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.InvalidTime)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.invalidTime (13) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 13:invalidTime: ", p), err)
		}
	}
	return err
}

func (p *ServiceConfigBean) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SSID", thrift.STRING, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:SSID: ", p), err)
	}
	if err := oprot.WriteString(string(p.SSID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.SSID (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:SSID: ", p), err)
	}
	return err
}

func (p *ServiceConfigBean) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceConfigBean(%+v)", *p)
}

// Attributes:
//  - ID
//  - Property
type ServiceConfigResult_ struct {
	ID       string `thrift:"ID,1" json:"ID"`
	Property int8   `thrift:"property,2" json:"property"`
}

func NewServiceConfigResult_() *ServiceConfigResult_ {
	return &ServiceConfigResult_{}
}

func (p *ServiceConfigResult_) GetID() string {
	return p.ID
}

func (p *ServiceConfigResult_) GetProperty() int8 {
	return p.Property
}
func (p *ServiceConfigResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ServiceConfigResult_) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *ServiceConfigResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Property = temp
	}
	return nil
}

func (p *ServiceConfigResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ServiceConfigResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ServiceConfigResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *ServiceConfigResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("property", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:property: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Property)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.property (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:property: ", p), err)
	}
	return err
}

func (p *ServiceConfigResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceConfigResult_(%+v)", *p)
}
