// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"vrv/im/service/timestamp"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  i64 incSingle(i64 ID, i32 type)")
	fmt.Fprintln(os.Stderr, "  i64 getSingle(i64 ID, i32 type)")
	fmt.Fprintln(os.Stderr, "   getBatch(i64 ID,  type)")
	fmt.Fprintln(os.Stderr, "  i64 incList(i64 ID, i32 type, i64 subID)")
	fmt.Fprintln(os.Stderr, "   incBatchList(i64 ID, i32 type,  sublist)")
	fmt.Fprintln(os.Stderr, "  void delList(i64 ID, i32 type)")
	fmt.Fprintln(os.Stderr, "  i64 getList(i64 ID, i32 type, i64 subID)")
	fmt.Fprintln(os.Stderr, "   getBatchList(i64 ID, i32 type,  sublist)")
	fmt.Fprintln(os.Stderr, "   getAllList(i64 ID, i32 type)")
	fmt.Fprintln(os.Stderr, "  i64 incNewID(i32 type)")
	fmt.Fprintln(os.Stderr, "  i64 getNewID(i32 type)")
	fmt.Fprintln(os.Stderr, "  TimestampResult getAllTimestamp(i64 ID,  type,  listType)")
	fmt.Fprintln(os.Stderr, "  string getName()")
	fmt.Fprintln(os.Stderr, "  string getVersion()")
	fmt.Fprintln(os.Stderr, "   getServiceBizMethods()")
	fmt.Fprintln(os.Stderr, "   getBizMethodsInvokeInfo()")
	fmt.Fprintln(os.Stderr, "  BizMethodInvokeInfo getBizMethodInvokeInfo(string methodName)")
	fmt.Fprintln(os.Stderr, "  i64 getServiceCount()")
	fmt.Fprintln(os.Stderr, "  i64 aliveSince()")
	fmt.Fprintln(os.Stderr, "  void reinitialize()")
	fmt.Fprintln(os.Stderr, "  void shutdown()")
	fmt.Fprintln(os.Stderr, "  void setOption(string key, string value)")
	fmt.Fprintln(os.Stderr, "   getOptions()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := timestamp.NewTimeStampServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "incSingle":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "IncSingle requires 2 args")
			flag.Usage()
		}
		argvalue0, err37 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err37 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err38 := (strconv.Atoi(flag.Arg(2)))
		if err38 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.IncSingle(value0, value1))
		fmt.Print("\n")
		break
	case "getSingle":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetSingle requires 2 args")
			flag.Usage()
		}
		argvalue0, err39 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err39 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err40 := (strconv.Atoi(flag.Arg(2)))
		if err40 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetSingle(value0, value1))
		fmt.Print("\n")
		break
	case "getBatch":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetBatch requires 2 args")
			flag.Usage()
		}
		argvalue0, err41 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err41 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg42 := flag.Arg(2)
		mbTrans43 := thrift.NewTMemoryBufferLen(len(arg42))
		defer mbTrans43.Close()
		_, err44 := mbTrans43.WriteString(arg42)
		if err44 != nil {
			Usage()
			return
		}
		factory45 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt46 := factory45.GetProtocol(mbTrans43)
		containerStruct1 := timestamp.NewTimeStampServiceGetBatchArgs()
		err47 := containerStruct1.ReadField2(jsProt46)
		if err47 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Type
		value1 := argvalue1
		fmt.Print(client.GetBatch(value0, value1))
		fmt.Print("\n")
		break
	case "incList":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "IncList requires 3 args")
			flag.Usage()
		}
		argvalue0, err48 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err48 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err49 := (strconv.Atoi(flag.Arg(2)))
		if err49 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2, err50 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err50 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.IncList(value0, value1, value2))
		fmt.Print("\n")
		break
	case "incBatchList":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "IncBatchList requires 3 args")
			flag.Usage()
		}
		argvalue0, err51 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err51 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err52 := (strconv.Atoi(flag.Arg(2)))
		if err52 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg53 := flag.Arg(3)
		mbTrans54 := thrift.NewTMemoryBufferLen(len(arg53))
		defer mbTrans54.Close()
		_, err55 := mbTrans54.WriteString(arg53)
		if err55 != nil {
			Usage()
			return
		}
		factory56 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt57 := factory56.GetProtocol(mbTrans54)
		containerStruct2 := timestamp.NewTimeStampServiceIncBatchListArgs()
		err58 := containerStruct2.ReadField3(jsProt57)
		if err58 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Sublist
		value2 := argvalue2
		fmt.Print(client.IncBatchList(value0, value1, value2))
		fmt.Print("\n")
		break
	case "delList":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "DelList requires 2 args")
			flag.Usage()
		}
		argvalue0, err59 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err59 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err60 := (strconv.Atoi(flag.Arg(2)))
		if err60 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.DelList(value0, value1))
		fmt.Print("\n")
		break
	case "getList":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetList requires 3 args")
			flag.Usage()
		}
		argvalue0, err61 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err61 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err62 := (strconv.Atoi(flag.Arg(2)))
		if err62 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		argvalue2, err63 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err63 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetList(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getBatchList":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetBatchList requires 3 args")
			flag.Usage()
		}
		argvalue0, err64 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err64 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err65 := (strconv.Atoi(flag.Arg(2)))
		if err65 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		arg66 := flag.Arg(3)
		mbTrans67 := thrift.NewTMemoryBufferLen(len(arg66))
		defer mbTrans67.Close()
		_, err68 := mbTrans67.WriteString(arg66)
		if err68 != nil {
			Usage()
			return
		}
		factory69 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt70 := factory69.GetProtocol(mbTrans67)
		containerStruct2 := timestamp.NewTimeStampServiceGetBatchListArgs()
		err71 := containerStruct2.ReadField3(jsProt70)
		if err71 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Sublist
		value2 := argvalue2
		fmt.Print(client.GetBatchList(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getAllList":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetAllList requires 2 args")
			flag.Usage()
		}
		argvalue0, err72 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err72 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err73 := (strconv.Atoi(flag.Arg(2)))
		if err73 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.GetAllList(value0, value1))
		fmt.Print("\n")
		break
	case "incNewID":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IncNewID requires 1 args")
			flag.Usage()
		}
		tmp0, err74 := (strconv.Atoi(flag.Arg(1)))
		if err74 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.IncNewID(value0))
		fmt.Print("\n")
		break
	case "getNewID":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetNewID requires 1 args")
			flag.Usage()
		}
		tmp0, err75 := (strconv.Atoi(flag.Arg(1)))
		if err75 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		fmt.Print(client.GetNewID(value0))
		fmt.Print("\n")
		break
	case "getAllTimestamp":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetAllTimestamp requires 3 args")
			flag.Usage()
		}
		argvalue0, err76 := (strconv.ParseInt(flag.Arg(1), 10, 64))
		if err76 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg77 := flag.Arg(2)
		mbTrans78 := thrift.NewTMemoryBufferLen(len(arg77))
		defer mbTrans78.Close()
		_, err79 := mbTrans78.WriteString(arg77)
		if err79 != nil {
			Usage()
			return
		}
		factory80 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt81 := factory80.GetProtocol(mbTrans78)
		containerStruct1 := timestamp.NewTimeStampServiceGetAllTimestampArgs()
		err82 := containerStruct1.ReadField2(jsProt81)
		if err82 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Type
		value1 := argvalue1
		arg83 := flag.Arg(3)
		mbTrans84 := thrift.NewTMemoryBufferLen(len(arg83))
		defer mbTrans84.Close()
		_, err85 := mbTrans84.WriteString(arg83)
		if err85 != nil {
			Usage()
			return
		}
		factory86 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt87 := factory86.GetProtocol(mbTrans84)
		containerStruct2 := timestamp.NewTimeStampServiceGetAllTimestampArgs()
		err88 := containerStruct2.ReadField3(jsProt87)
		if err88 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ListType
		value2 := argvalue2
		fmt.Print(client.GetAllTimestamp(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getName":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetName requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetName())
		fmt.Print("\n")
		break
	case "getVersion":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetVersion requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetVersion())
		fmt.Print("\n")
		break
	case "getServiceBizMethods":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceBizMethods requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceBizMethods())
		fmt.Print("\n")
		break
	case "getBizMethodsInvokeInfo":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetBizMethodsInvokeInfo requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetBizMethodsInvokeInfo())
		fmt.Print("\n")
		break
	case "getBizMethodInvokeInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetBizMethodInvokeInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetBizMethodInvokeInfo(value0))
		fmt.Print("\n")
		break
	case "getServiceCount":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetServiceCount requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetServiceCount())
		fmt.Print("\n")
		break
	case "aliveSince":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "AliveSince requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.AliveSince())
		fmt.Print("\n")
		break
	case "reinitialize":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Reinitialize requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Reinitialize())
		fmt.Print("\n")
		break
	case "shutdown":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Shutdown requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Shutdown())
		fmt.Print("\n")
		break
	case "setOption":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetOption requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.SetOption(value0, value1))
		fmt.Print("\n")
		break
	case "getOptions":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetOptions requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetOptions())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
