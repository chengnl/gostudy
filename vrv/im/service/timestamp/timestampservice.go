// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package timestamp

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"vrv/im/service/vrv"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = vrv.GoUnusedProtection__

type TimeStampService interface {
	vrv.VRVService

	// ********************************添加或者更新时间戳******************************************
	// 根据某ID，获取某类型添加或者更新后的时间戳ID
	// 参数：ID：涉及需要更新的ID，type：类型
	//       ID:   目前比如：userID或者企业ID
	//       type：类型
	// 返回：添加或者更新后的时间戳
	//                       根据ID和type到数据库里面查询
	//                       |                                        |
	//                     有|                                    没有|
	//             将获取到的时间戳+1，更新           由10开始，生成时间戳，并将ID和type一起存储
	//             存储。                                             |
	//                       |                                        |
	//                       |                                  返回新的时间戳
	//                返回新的时间戳
	//
	// Parameters:
	//  - ID
	//  - Type
	IncSingle(ID int64, type_a1 int32) (r int64, err error)
	// ********************************获取时间戳***************************************************
	// 根据某ID，获取某类型的时间戳ID
	// 参数：ID：涉及需要更新的ID，type：类型
	//       ID:   目前比如：userID
	//       type：类型
	// 返回：获取的时间戳
	//                       根据ID和type到数据库里面查询
	//                       |                                        |
	//                     有|                                    没有|
	//             返回获取到的时间戳                           时间戳返回1
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	GetSingle(ID int64, type_a1 int32) (r int64, err error)
	// ********************************批量获取时间戳***************************************************
	// 根据某ID，获取批量类型的时间戳ID，用户登录的时候调用
	// 参数：ID：涉及需要更新的ID，type：批量类型
	//       ID:   目前比如：userID
	//       type：类型
	// 返回：获取各个类型的时间戳
	//                     根据ID和type到数据库里面查询，遍历查询或者批量查询均可，
	//                     注意没有查到的类型， 时间戳返回1.
	//                             |
	//                             |
	//                     返回获取到的时间戳列表。
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	GetBatch(ID int64, type_a1 []int32) (r []int64, err error)
	// ********************************添加或者更新页码或者组织架构时间戳*****************************
	// 根据某ID，某类型，获取某页添加或者更新后的时间戳ID
	// 主要是用户好友页码的时间戳和用户表情的时间戳
	// 参数：ID：涉及需要更新的ID，目前比如：userID，groupID, enterpriseID
	//       type：类型，比如：121：好友页码，122：表情页码,123：群成员页码, 11: 企业组织机构时间戳
	//       subID：二级ID(页码或者组织架构ID)
	// 返回：添加或者更新后的时间戳
	//                       根据ID、type和subID到数据库里面查询
	//                       |                                        |
	//                     有|                                    没有|
	//             将获取到的时间戳+1，更新           由10开始，生成时间戳，并将ID、type和subID一起存储
	//             存储。                                             |
	//                       |                                        |
	//                       |                                  返回新的时间戳
	//                返回新的时间戳
	//
	// Parameters:
	//  - ID
	//  - Type
	//  - SubID
	IncList(ID int64, type_a1 int32, subID int64) (r int64, err error)
	// *************************************批量更新时间戳*******************************************
	// 批量更新时间戳
	// 参数：ID：类型, type：类型, sublist: subid的集合
	// 返回：更新后的时间戳列表
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	//  - Sublist
	IncBatchList(ID int64, type_a1 int32, sublist []int64) (r []int64, err error)
	// *************************************删除该ID，类型的所有时间戳*******************************
	// 删除该ID，类型的所有时间戳
	// 参数：ID：类型, type：类型
	// 返回：无
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	DelList(ID int64, type_a1 int32) (err error)
	// ********************************获取某页时间戳****************************************
	// 根据某ID，某类型，获取某页的时间戳ID
	// 主要是用户好友页码的时间戳和用户表情的时间戳
	// 参数：ID：涉及需要更新的ID，目前比如：userID，enterpriseID
	//       type：类型，比如：121：好友页码，122：表情页码,123：群成员页码, 11: 企业组织机构时间戳
	//       subID：二级ID(页码或者组织架构ID)
	// 返回：获取的时间戳
	//                       根据ID、type和subID到数据库里面查询
	//                       |                                        |
	//                     有|                                    没有|
	//             返回获取到的时间戳                           时间戳返回1
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	//  - SubID
	GetList(ID int64, type_a1 int32, subID int64) (r int64, err error)
	// ********************************批量获取分页的时间戳**********************************************
	// 根据某ID，某类型的批量页时间戳ID
	// 参数：ID：涉及需要更新的ID，type：类型，subid：批量页码
	//       ID:   目前比如：userID
	//       type：类型，比如：121：好友页码，122：表情页码,123 群成员页码其他类型见ap.thrift的Timestamp
	//       subid: 批量页码
	// 返回：获取各个页码的时间戳
	//                     根据ID、type和subid到数据库里面查询，遍历查询或者批量查询均可，
	//                     注意没有查到的subid，时间戳返回1.
	//                             |
	//                             |
	//                     返回获取到的时间戳列表。
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	//  - Sublist
	GetBatchList(ID int64, type_a1 int32, sublist []int64) (r []int64, err error)
	// *************************************根据ID,type获取所有二级时间戳集合*******************************
	// 根据ID,type获取所有二级时间戳集合(页码时间戳，组织架构时间戳)
	// 参数：ID：上级ID, type：类型
	// 返回：map<i64,i64>：二级时间戳的map
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	GetAllList(ID int64, type_a1 int32) (r map[int64]int64, err error)
	// ********************************添加或者更新某类型的时间戳****************************************
	// 根据类型添加或者更新时间戳，主要是消息类
	// 参数：type：类型
	//       type：类型，比如：201:消息，202：公告, 203: 群ID, 204: 注册用户ID 205:群邀请消息ID
	//                   206：群验证信息ID 207：群响应信息ID 208：推送消息ID 210:新鲜事ID 211:评论主体ID 212:
	//                   评论自身，213:相册 214:照片等,其他类型见ap.thrift的Timestamp
	// 返回：添加或者更新的时间戳
	//                              根据type到数据库里面查询
	//                       |                                        |
	//                     有|                                    没有|
	//             将获取到的时间戳+1，更新           由10开始，生成时间戳，并将type一起存储
	//             存储。                                             |
	//                       |                                        |
	//                       |                                  返回新的时间戳
	//                返回新的时间戳
	//
	// Parameters:
	//  - Type
	IncNewID(type_a1 int32) (r int64, err error)
	// *************************************获取某类型的时间戳*******************************************
	// 根据类型获取时间戳，主要是消息类
	// 参数：type：类型
	//       type：类型，比如：201:消息，202：公告, 203: 群ID, 204: 注册用户ID 205:群邀请消息ID
	//                   206：群验证信息ID 207：群响应信息ID 208：推送消息ID 210:新鲜事ID 211:评论主体ID
	//                   212:评论自身，213:相册 214:照片
	// 返回：时间戳
	//                              根据type到数据库里面查询
	//                       |                                        |
	//                     有|                                    没有|
	//             返回获取到的时间戳                           时间戳返回1
	//
	// Parameters:
	//  - Type
	GetNewID(type_a1 int32) (r int64, err error)
	// *************************************获取所有类型的时间戳*******************************************
	// 根据传入的类型获取时间戳
	// 参数：ID：ID， type：类型，listType：list时间戳类型，目前只有好友时间戳
	// 返回：TimestampResult 包含getBatch得到的时间戳结果集和好友page时间戳集合
	//
	//
	// Parameters:
	//  - ID
	//  - Type
	//  - ListType
	GetAllTimestamp(ID int64, type_a1 []int32, listType []int32) (r *TimestampResult_, err error)
}

type TimeStampServiceClient struct {
	*vrv.VRVServiceClient
}

func NewTimeStampServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TimeStampServiceClient {
	return &TimeStampServiceClient{VRVServiceClient: vrv.NewVRVServiceClientFactory(t, f)}
}

func NewTimeStampServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TimeStampServiceClient {
	return &TimeStampServiceClient{VRVServiceClient: vrv.NewVRVServiceClientProtocol(t, iprot, oprot)}
}

// ********************************添加或者更新时间戳******************************************
// 根据某ID，获取某类型添加或者更新后的时间戳ID
// 参数：ID：涉及需要更新的ID，type：类型
//       ID:   目前比如：userID或者企业ID
//       type：类型
// 返回：添加或者更新后的时间戳
//                       根据ID和type到数据库里面查询
//                       |                                        |
//                     有|                                    没有|
//             将获取到的时间戳+1，更新           由10开始，生成时间戳，并将ID和type一起存储
//             存储。                                             |
//                       |                                        |
//                       |                                  返回新的时间戳
//                返回新的时间戳
//
// Parameters:
//  - ID
//  - Type
func (p *TimeStampServiceClient) IncSingle(ID int64, type_a1 int32) (r int64, err error) {
	if err = p.sendIncSingle(ID, type_a1); err != nil {
		return
	}
	return p.recvIncSingle()
}

func (p *TimeStampServiceClient) sendIncSingle(ID int64, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incSingle", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceIncSingleArgs{
		ID:   ID,
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvIncSingle() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incSingle" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "incSingle failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "incSingle failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incSingle failed: invalid message type")
		return
	}
	result := TimeStampServiceIncSingleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********************************获取时间戳***************************************************
// 根据某ID，获取某类型的时间戳ID
// 参数：ID：涉及需要更新的ID，type：类型
//       ID:   目前比如：userID
//       type：类型
// 返回：获取的时间戳
//                       根据ID和type到数据库里面查询
//                       |                                        |
//                     有|                                    没有|
//             返回获取到的时间戳                           时间戳返回1
//
//
// Parameters:
//  - ID
//  - Type
func (p *TimeStampServiceClient) GetSingle(ID int64, type_a1 int32) (r int64, err error) {
	if err = p.sendGetSingle(ID, type_a1); err != nil {
		return
	}
	return p.recvGetSingle()
}

func (p *TimeStampServiceClient) sendGetSingle(ID int64, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSingle", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetSingleArgs{
		ID:   ID,
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetSingle() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSingle" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSingle failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSingle failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSingle failed: invalid message type")
		return
	}
	result := TimeStampServiceGetSingleResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********************************批量获取时间戳***************************************************
// 根据某ID，获取批量类型的时间戳ID，用户登录的时候调用
// 参数：ID：涉及需要更新的ID，type：批量类型
//       ID:   目前比如：userID
//       type：类型
// 返回：获取各个类型的时间戳
//                     根据ID和type到数据库里面查询，遍历查询或者批量查询均可，
//                     注意没有查到的类型， 时间戳返回1.
//                             |
//                             |
//                     返回获取到的时间戳列表。
//
//
// Parameters:
//  - ID
//  - Type
func (p *TimeStampServiceClient) GetBatch(ID int64, type_a1 []int32) (r []int64, err error) {
	if err = p.sendGetBatch(ID, type_a1); err != nil {
		return
	}
	return p.recvGetBatch()
}

func (p *TimeStampServiceClient) sendGetBatch(ID int64, type_a1 []int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBatch", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetBatchArgs{
		ID:   ID,
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetBatch() (value []int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBatch" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBatch failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBatch failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBatch failed: invalid message type")
		return
	}
	result := TimeStampServiceGetBatchResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********************************添加或者更新页码或者组织架构时间戳*****************************
// 根据某ID，某类型，获取某页添加或者更新后的时间戳ID
// 主要是用户好友页码的时间戳和用户表情的时间戳
// 参数：ID：涉及需要更新的ID，目前比如：userID，groupID, enterpriseID
//       type：类型，比如：121：好友页码，122：表情页码,123：群成员页码, 11: 企业组织机构时间戳
//       subID：二级ID(页码或者组织架构ID)
// 返回：添加或者更新后的时间戳
//                       根据ID、type和subID到数据库里面查询
//                       |                                        |
//                     有|                                    没有|
//             将获取到的时间戳+1，更新           由10开始，生成时间戳，并将ID、type和subID一起存储
//             存储。                                             |
//                       |                                        |
//                       |                                  返回新的时间戳
//                返回新的时间戳
//
// Parameters:
//  - ID
//  - Type
//  - SubID
func (p *TimeStampServiceClient) IncList(ID int64, type_a1 int32, subID int64) (r int64, err error) {
	if err = p.sendIncList(ID, type_a1, subID); err != nil {
		return
	}
	return p.recvIncList()
}

func (p *TimeStampServiceClient) sendIncList(ID int64, type_a1 int32, subID int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceIncListArgs{
		ID:    ID,
		Type:  type_a1,
		SubID: subID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvIncList() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "incList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "incList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incList failed: invalid message type")
		return
	}
	result := TimeStampServiceIncListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// *************************************批量更新时间戳*******************************************
// 批量更新时间戳
// 参数：ID：类型, type：类型, sublist: subid的集合
// 返回：更新后的时间戳列表
//
//
// Parameters:
//  - ID
//  - Type
//  - Sublist
func (p *TimeStampServiceClient) IncBatchList(ID int64, type_a1 int32, sublist []int64) (r []int64, err error) {
	if err = p.sendIncBatchList(ID, type_a1, sublist); err != nil {
		return
	}
	return p.recvIncBatchList()
}

func (p *TimeStampServiceClient) sendIncBatchList(ID int64, type_a1 int32, sublist []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incBatchList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceIncBatchListArgs{
		ID:      ID,
		Type:    type_a1,
		Sublist: sublist,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvIncBatchList() (value []int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incBatchList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "incBatchList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "incBatchList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incBatchList failed: invalid message type")
		return
	}
	result := TimeStampServiceIncBatchListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// *************************************删除该ID，类型的所有时间戳*******************************
// 删除该ID，类型的所有时间戳
// 参数：ID：类型, type：类型
// 返回：无
//
//
// Parameters:
//  - ID
//  - Type
func (p *TimeStampServiceClient) DelList(ID int64, type_a1 int32) (err error) {
	if err = p.sendDelList(ID, type_a1); err != nil {
		return
	}
	return p.recvDelList()
}

func (p *TimeStampServiceClient) sendDelList(ID int64, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceDelListArgs{
		ID:   ID,
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvDelList() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "delList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "delList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "delList failed: invalid message type")
		return
	}
	result := TimeStampServiceDelListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// ********************************获取某页时间戳****************************************
// 根据某ID，某类型，获取某页的时间戳ID
// 主要是用户好友页码的时间戳和用户表情的时间戳
// 参数：ID：涉及需要更新的ID，目前比如：userID，enterpriseID
//       type：类型，比如：121：好友页码，122：表情页码,123：群成员页码, 11: 企业组织机构时间戳
//       subID：二级ID(页码或者组织架构ID)
// 返回：获取的时间戳
//                       根据ID、type和subID到数据库里面查询
//                       |                                        |
//                     有|                                    没有|
//             返回获取到的时间戳                           时间戳返回1
//
//
// Parameters:
//  - ID
//  - Type
//  - SubID
func (p *TimeStampServiceClient) GetList(ID int64, type_a1 int32, subID int64) (r int64, err error) {
	if err = p.sendGetList(ID, type_a1, subID); err != nil {
		return
	}
	return p.recvGetList()
}

func (p *TimeStampServiceClient) sendGetList(ID int64, type_a1 int32, subID int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetListArgs{
		ID:    ID,
		Type:  type_a1,
		SubID: subID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetList() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getList failed: invalid message type")
		return
	}
	result := TimeStampServiceGetListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********************************批量获取分页的时间戳**********************************************
// 根据某ID，某类型的批量页时间戳ID
// 参数：ID：涉及需要更新的ID，type：类型，subid：批量页码
//       ID:   目前比如：userID
//       type：类型，比如：121：好友页码，122：表情页码,123 群成员页码其他类型见ap.thrift的Timestamp
//       subid: 批量页码
// 返回：获取各个页码的时间戳
//                     根据ID、type和subid到数据库里面查询，遍历查询或者批量查询均可，
//                     注意没有查到的subid，时间戳返回1.
//                             |
//                             |
//                     返回获取到的时间戳列表。
//
//
// Parameters:
//  - ID
//  - Type
//  - Sublist
func (p *TimeStampServiceClient) GetBatchList(ID int64, type_a1 int32, sublist []int64) (r []int64, err error) {
	if err = p.sendGetBatchList(ID, type_a1, sublist); err != nil {
		return
	}
	return p.recvGetBatchList()
}

func (p *TimeStampServiceClient) sendGetBatchList(ID int64, type_a1 int32, sublist []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getBatchList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetBatchListArgs{
		ID:      ID,
		Type:    type_a1,
		Sublist: sublist,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetBatchList() (value []int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getBatchList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBatchList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBatchList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBatchList failed: invalid message type")
		return
	}
	result := TimeStampServiceGetBatchListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// *************************************根据ID,type获取所有二级时间戳集合*******************************
// 根据ID,type获取所有二级时间戳集合(页码时间戳，组织架构时间戳)
// 参数：ID：上级ID, type：类型
// 返回：map<i64,i64>：二级时间戳的map
//
//
// Parameters:
//  - ID
//  - Type
func (p *TimeStampServiceClient) GetAllList(ID int64, type_a1 int32) (r map[int64]int64, err error) {
	if err = p.sendGetAllList(ID, type_a1); err != nil {
		return
	}
	return p.recvGetAllList()
}

func (p *TimeStampServiceClient) sendGetAllList(ID int64, type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAllList", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetAllListArgs{
		ID:   ID,
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetAllList() (value map[int64]int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAllList" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllList failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllList failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllList failed: invalid message type")
		return
	}
	result := TimeStampServiceGetAllListResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// ********************************添加或者更新某类型的时间戳****************************************
// 根据类型添加或者更新时间戳，主要是消息类
// 参数：type：类型
//       type：类型，比如：201:消息，202：公告, 203: 群ID, 204: 注册用户ID 205:群邀请消息ID
//                   206：群验证信息ID 207：群响应信息ID 208：推送消息ID 210:新鲜事ID 211:评论主体ID 212:
//                   评论自身，213:相册 214:照片等,其他类型见ap.thrift的Timestamp
// 返回：添加或者更新的时间戳
//                              根据type到数据库里面查询
//                       |                                        |
//                     有|                                    没有|
//             将获取到的时间戳+1，更新           由10开始，生成时间戳，并将type一起存储
//             存储。                                             |
//                       |                                        |
//                       |                                  返回新的时间戳
//                返回新的时间戳
//
// Parameters:
//  - Type
func (p *TimeStampServiceClient) IncNewID(type_a1 int32) (r int64, err error) {
	if err = p.sendIncNewID(type_a1); err != nil {
		return
	}
	return p.recvIncNewID()
}

func (p *TimeStampServiceClient) sendIncNewID(type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("incNewID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceIncNewIDArgs{
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvIncNewID() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "incNewID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "incNewID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "incNewID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "incNewID failed: invalid message type")
		return
	}
	result := TimeStampServiceIncNewIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// *************************************获取某类型的时间戳*******************************************
// 根据类型获取时间戳，主要是消息类
// 参数：type：类型
//       type：类型，比如：201:消息，202：公告, 203: 群ID, 204: 注册用户ID 205:群邀请消息ID
//                   206：群验证信息ID 207：群响应信息ID 208：推送消息ID 210:新鲜事ID 211:评论主体ID
//                   212:评论自身，213:相册 214:照片
// 返回：时间戳
//                              根据type到数据库里面查询
//                       |                                        |
//                     有|                                    没有|
//             返回获取到的时间戳                           时间戳返回1
//
// Parameters:
//  - Type
func (p *TimeStampServiceClient) GetNewID(type_a1 int32) (r int64, err error) {
	if err = p.sendGetNewID(type_a1); err != nil {
		return
	}
	return p.recvGetNewID()
}

func (p *TimeStampServiceClient) sendGetNewID(type_a1 int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getNewID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetNewIDArgs{
		Type: type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetNewID() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getNewID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getNewID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getNewID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getNewID failed: invalid message type")
		return
	}
	result := TimeStampServiceGetNewIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// *************************************获取所有类型的时间戳*******************************************
// 根据传入的类型获取时间戳
// 参数：ID：ID， type：类型，listType：list时间戳类型，目前只有好友时间戳
// 返回：TimestampResult 包含getBatch得到的时间戳结果集和好友page时间戳集合
//
//
// Parameters:
//  - ID
//  - Type
//  - ListType
func (p *TimeStampServiceClient) GetAllTimestamp(ID int64, type_a1 []int32, listType []int32) (r *TimestampResult_, err error) {
	if err = p.sendGetAllTimestamp(ID, type_a1, listType); err != nil {
		return
	}
	return p.recvGetAllTimestamp()
}

func (p *TimeStampServiceClient) sendGetAllTimestamp(ID int64, type_a1 []int32, listType []int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getAllTimestamp", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := TimeStampServiceGetAllTimestampArgs{
		ID:       ID,
		Type:     type_a1,
		ListType: listType,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *TimeStampServiceClient) recvGetAllTimestamp() (value *TimestampResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getAllTimestamp" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getAllTimestamp failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getAllTimestamp failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getAllTimestamp failed: invalid message type")
		return
	}
	result := TimeStampServiceGetAllTimestampResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type TimeStampServiceProcessor struct {
	*vrv.VRVServiceProcessor
}

func NewTimeStampServiceProcessor(handler TimeStampService) *TimeStampServiceProcessor {
	self26 := &TimeStampServiceProcessor{vrv.NewVRVServiceProcessor(handler)}
	self26.AddToProcessorMap("incSingle", &timeStampServiceProcessorIncSingle{handler: handler})
	self26.AddToProcessorMap("getSingle", &timeStampServiceProcessorGetSingle{handler: handler})
	self26.AddToProcessorMap("getBatch", &timeStampServiceProcessorGetBatch{handler: handler})
	self26.AddToProcessorMap("incList", &timeStampServiceProcessorIncList{handler: handler})
	self26.AddToProcessorMap("incBatchList", &timeStampServiceProcessorIncBatchList{handler: handler})
	self26.AddToProcessorMap("delList", &timeStampServiceProcessorDelList{handler: handler})
	self26.AddToProcessorMap("getList", &timeStampServiceProcessorGetList{handler: handler})
	self26.AddToProcessorMap("getBatchList", &timeStampServiceProcessorGetBatchList{handler: handler})
	self26.AddToProcessorMap("getAllList", &timeStampServiceProcessorGetAllList{handler: handler})
	self26.AddToProcessorMap("incNewID", &timeStampServiceProcessorIncNewID{handler: handler})
	self26.AddToProcessorMap("getNewID", &timeStampServiceProcessorGetNewID{handler: handler})
	self26.AddToProcessorMap("getAllTimestamp", &timeStampServiceProcessorGetAllTimestamp{handler: handler})
	return self26
}

type timeStampServiceProcessorIncSingle struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorIncSingle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceIncSingleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incSingle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceIncSingleResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.IncSingle(args.ID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incSingle: "+err2.Error())
		oprot.WriteMessageBegin("incSingle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("incSingle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetSingle struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetSingle) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetSingleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSingle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetSingleResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetSingle(args.ID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSingle: "+err2.Error())
		oprot.WriteMessageBegin("getSingle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getSingle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetBatch struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetBatch) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetBatchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetBatchResult{}
	var retval []int64
	var err2 error
	if retval, err2 = p.handler.GetBatch(args.ID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBatch: "+err2.Error())
		oprot.WriteMessageBegin("getBatch", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBatch", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorIncList struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorIncList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceIncListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceIncListResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.IncList(args.ID, args.Type, args.SubID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incList: "+err2.Error())
		oprot.WriteMessageBegin("incList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("incList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorIncBatchList struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorIncBatchList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceIncBatchListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incBatchList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceIncBatchListResult{}
	var retval []int64
	var err2 error
	if retval, err2 = p.handler.IncBatchList(args.ID, args.Type, args.Sublist); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incBatchList: "+err2.Error())
		oprot.WriteMessageBegin("incBatchList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("incBatchList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorDelList struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorDelList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceDelListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceDelListResult{}
	var err2 error
	if err2 = p.handler.DelList(args.ID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delList: "+err2.Error())
		oprot.WriteMessageBegin("delList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("delList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetList struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetListResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetList(args.ID, args.Type, args.SubID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getList: "+err2.Error())
		oprot.WriteMessageBegin("getList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetBatchList struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetBatchList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetBatchListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getBatchList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetBatchListResult{}
	var retval []int64
	var err2 error
	if retval, err2 = p.handler.GetBatchList(args.ID, args.Type, args.Sublist); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBatchList: "+err2.Error())
		oprot.WriteMessageBegin("getBatchList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getBatchList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetAllList struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetAllList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetAllListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetAllListResult{}
	var retval map[int64]int64
	var err2 error
	if retval, err2 = p.handler.GetAllList(args.ID, args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllList: "+err2.Error())
		oprot.WriteMessageBegin("getAllList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorIncNewID struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorIncNewID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceIncNewIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incNewID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceIncNewIDResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.IncNewID(args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incNewID: "+err2.Error())
		oprot.WriteMessageBegin("incNewID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("incNewID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetNewID struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetNewID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetNewIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getNewID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetNewIDResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.GetNewID(args.Type); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNewID: "+err2.Error())
		oprot.WriteMessageBegin("getNewID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getNewID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type timeStampServiceProcessorGetAllTimestamp struct {
	handler TimeStampService
}

func (p *timeStampServiceProcessorGetAllTimestamp) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TimeStampServiceGetAllTimestampArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getAllTimestamp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := TimeStampServiceGetAllTimestampResult{}
	var retval *TimestampResult_
	var err2 error
	if retval, err2 = p.handler.GetAllTimestamp(args.ID, args.Type, args.ListType); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllTimestamp: "+err2.Error())
		oprot.WriteMessageBegin("getAllTimestamp", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getAllTimestamp", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ID
//  - Type
type TimeStampServiceIncSingleArgs struct {
	ID   int64 `thrift:"ID,1" json:"ID"`
	Type int32 `thrift:"type,2" json:"type"`
}

func NewTimeStampServiceIncSingleArgs() *TimeStampServiceIncSingleArgs {
	return &TimeStampServiceIncSingleArgs{}
}

func (p *TimeStampServiceIncSingleArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceIncSingleArgs) GetType() int32 {
	return p.Type
}
func (p *TimeStampServiceIncSingleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncSingleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceIncSingleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceIncSingleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incSingle_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncSingleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncSingleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncSingleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncSingleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceIncSingleResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceIncSingleResult() *TimeStampServiceIncSingleResult {
	return &TimeStampServiceIncSingleResult{}
}

var TimeStampServiceIncSingleResult_Success_DEFAULT int64

func (p *TimeStampServiceIncSingleResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TimeStampServiceIncSingleResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TimeStampServiceIncSingleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceIncSingleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncSingleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TimeStampServiceIncSingleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incSingle_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncSingleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceIncSingleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncSingleResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TimeStampServiceGetSingleArgs struct {
	ID   int64 `thrift:"ID,1" json:"ID"`
	Type int32 `thrift:"type,2" json:"type"`
}

func NewTimeStampServiceGetSingleArgs() *TimeStampServiceGetSingleArgs {
	return &TimeStampServiceGetSingleArgs{}
}

func (p *TimeStampServiceGetSingleArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceGetSingleArgs) GetType() int32 {
	return p.Type
}
func (p *TimeStampServiceGetSingleArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetSingleArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceGetSingleArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceGetSingleArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSingle_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetSingleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetSingleArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetSingleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetSingleArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetSingleResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetSingleResult() *TimeStampServiceGetSingleResult {
	return &TimeStampServiceGetSingleResult{}
}

var TimeStampServiceGetSingleResult_Success_DEFAULT int64

func (p *TimeStampServiceGetSingleResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TimeStampServiceGetSingleResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TimeStampServiceGetSingleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetSingleResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetSingleResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TimeStampServiceGetSingleResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSingle_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetSingleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetSingleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetSingleResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TimeStampServiceGetBatchArgs struct {
	ID   int64   `thrift:"ID,1" json:"ID"`
	Type []int32 `thrift:"type,2" json:"type"`
}

func NewTimeStampServiceGetBatchArgs() *TimeStampServiceGetBatchArgs {
	return &TimeStampServiceGetBatchArgs{}
}

func (p *TimeStampServiceGetBatchArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceGetBatchArgs) GetType() []int32 {
	return p.Type
}
func (p *TimeStampServiceGetBatchArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceGetBatchArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Type = tSlice
	for i := 0; i < size; i++ {
		var _elem27 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem27 = v
		}
		p.Type = append(p.Type, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBatch_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetBatchArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Type)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Type {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetBatchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetBatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetBatchResult struct {
	Success []int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetBatchResult() *TimeStampServiceGetBatchResult {
	return &TimeStampServiceGetBatchResult{}
}

var TimeStampServiceGetBatchResult_Success_DEFAULT []int64

func (p *TimeStampServiceGetBatchResult) GetSuccess() []int64 {
	return p.Success
}
func (p *TimeStampServiceGetBatchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetBatchResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem28 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem28 = v
		}
		p.Success = append(p.Success, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBatch_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetBatchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetBatchResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - SubID
type TimeStampServiceIncListArgs struct {
	ID    int64 `thrift:"ID,1" json:"ID"`
	Type  int32 `thrift:"type,2" json:"type"`
	SubID int64 `thrift:"subID,3" json:"subID"`
}

func NewTimeStampServiceIncListArgs() *TimeStampServiceIncListArgs {
	return &TimeStampServiceIncListArgs{}
}

func (p *TimeStampServiceIncListArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceIncListArgs) GetType() int32 {
	return p.Type
}

func (p *TimeStampServiceIncListArgs) GetSubID() int64 {
	return p.SubID
}
func (p *TimeStampServiceIncListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceIncListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceIncListArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SubID = v
	}
	return nil
}

func (p *TimeStampServiceIncListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceIncListResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceIncListResult() *TimeStampServiceIncListResult {
	return &TimeStampServiceIncListResult{}
}

var TimeStampServiceIncListResult_Success_DEFAULT int64

func (p *TimeStampServiceIncListResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TimeStampServiceIncListResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TimeStampServiceIncListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceIncListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncListResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TimeStampServiceIncListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceIncListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncListResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - Sublist
type TimeStampServiceIncBatchListArgs struct {
	ID      int64   `thrift:"ID,1" json:"ID"`
	Type    int32   `thrift:"type,2" json:"type"`
	Sublist []int64 `thrift:"sublist,3" json:"sublist"`
}

func NewTimeStampServiceIncBatchListArgs() *TimeStampServiceIncBatchListArgs {
	return &TimeStampServiceIncBatchListArgs{}
}

func (p *TimeStampServiceIncBatchListArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceIncBatchListArgs) GetType() int32 {
	return p.Type
}

func (p *TimeStampServiceIncBatchListArgs) GetSublist() []int64 {
	return p.Sublist
}
func (p *TimeStampServiceIncBatchListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncBatchListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceIncBatchListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceIncBatchListArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Sublist = tSlice
	for i := 0; i < size; i++ {
		var _elem29 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem29 = v
		}
		p.Sublist = append(p.Sublist, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncBatchListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incBatchList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncBatchListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncBatchListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncBatchListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sublist", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sublist: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Sublist)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Sublist {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sublist: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncBatchListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncBatchListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceIncBatchListResult struct {
	Success []int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceIncBatchListResult() *TimeStampServiceIncBatchListResult {
	return &TimeStampServiceIncBatchListResult{}
}

var TimeStampServiceIncBatchListResult_Success_DEFAULT []int64

func (p *TimeStampServiceIncBatchListResult) GetSuccess() []int64 {
	return p.Success
}
func (p *TimeStampServiceIncBatchListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceIncBatchListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncBatchListResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem30 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem30 = v
		}
		p.Success = append(p.Success, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncBatchListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incBatchList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncBatchListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceIncBatchListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncBatchListResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TimeStampServiceDelListArgs struct {
	ID   int64 `thrift:"ID,1" json:"ID"`
	Type int32 `thrift:"type,2" json:"type"`
}

func NewTimeStampServiceDelListArgs() *TimeStampServiceDelListArgs {
	return &TimeStampServiceDelListArgs{}
}

func (p *TimeStampServiceDelListArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceDelListArgs) GetType() int32 {
	return p.Type
}
func (p *TimeStampServiceDelListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceDelListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceDelListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceDelListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceDelListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceDelListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceDelListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceDelListArgs(%+v)", *p)
}

type TimeStampServiceDelListResult struct {
}

func NewTimeStampServiceDelListResult() *TimeStampServiceDelListResult {
	return &TimeStampServiceDelListResult{}
}

func (p *TimeStampServiceDelListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceDelListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceDelListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceDelListResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - SubID
type TimeStampServiceGetListArgs struct {
	ID    int64 `thrift:"ID,1" json:"ID"`
	Type  int32 `thrift:"type,2" json:"type"`
	SubID int64 `thrift:"subID,3" json:"subID"`
}

func NewTimeStampServiceGetListArgs() *TimeStampServiceGetListArgs {
	return &TimeStampServiceGetListArgs{}
}

func (p *TimeStampServiceGetListArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceGetListArgs) GetType() int32 {
	return p.Type
}

func (p *TimeStampServiceGetListArgs) GetSubID() int64 {
	return p.SubID
}
func (p *TimeStampServiceGetListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceGetListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceGetListArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SubID = v
	}
	return nil
}

func (p *TimeStampServiceGetListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subID", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:subID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subID (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:subID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetListResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetListResult() *TimeStampServiceGetListResult {
	return &TimeStampServiceGetListResult{}
}

var TimeStampServiceGetListResult_Success_DEFAULT int64

func (p *TimeStampServiceGetListResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TimeStampServiceGetListResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TimeStampServiceGetListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetListResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TimeStampServiceGetListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetListResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - Sublist
type TimeStampServiceGetBatchListArgs struct {
	ID      int64   `thrift:"ID,1" json:"ID"`
	Type    int32   `thrift:"type,2" json:"type"`
	Sublist []int64 `thrift:"sublist,3" json:"sublist"`
}

func NewTimeStampServiceGetBatchListArgs() *TimeStampServiceGetBatchListArgs {
	return &TimeStampServiceGetBatchListArgs{}
}

func (p *TimeStampServiceGetBatchListArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceGetBatchListArgs) GetType() int32 {
	return p.Type
}

func (p *TimeStampServiceGetBatchListArgs) GetSublist() []int64 {
	return p.Sublist
}
func (p *TimeStampServiceGetBatchListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceGetBatchListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceGetBatchListArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Sublist = tSlice
	for i := 0; i < size; i++ {
		var _elem31 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem31 = v
		}
		p.Sublist = append(p.Sublist, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBatchList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetBatchListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetBatchListArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sublist", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sublist: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Sublist)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Sublist {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sublist: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetBatchListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetBatchListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetBatchListResult struct {
	Success []int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetBatchListResult() *TimeStampServiceGetBatchListResult {
	return &TimeStampServiceGetBatchListResult{}
}

var TimeStampServiceGetBatchListResult_Success_DEFAULT []int64

func (p *TimeStampServiceGetBatchListResult) GetSuccess() []int64 {
	return p.Success
}
func (p *TimeStampServiceGetBatchListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetBatchListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchListResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int64, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem32 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem32 = v
		}
		p.Success = append(p.Success, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getBatchList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetBatchListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetBatchListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetBatchListResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TimeStampServiceGetAllListArgs struct {
	ID   int64 `thrift:"ID,1" json:"ID"`
	Type int32 `thrift:"type,2" json:"type"`
}

func NewTimeStampServiceGetAllListArgs() *TimeStampServiceGetAllListArgs {
	return &TimeStampServiceGetAllListArgs{}
}

func (p *TimeStampServiceGetAllListArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceGetAllListArgs) GetType() int32 {
	return p.Type
}
func (p *TimeStampServiceGetAllListArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetAllListArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceGetAllListArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceGetAllListArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllList_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetAllListArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetAllListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetAllListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetAllListResult struct {
	Success map[int64]int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetAllListResult() *TimeStampServiceGetAllListResult {
	return &TimeStampServiceGetAllListResult{}
}

var TimeStampServiceGetAllListResult_Success_DEFAULT map[int64]int64

func (p *TimeStampServiceGetAllListResult) GetSuccess() map[int64]int64 {
	return p.Success
}
func (p *TimeStampServiceGetAllListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetAllListResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetAllListResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[int64]int64, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key33 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key33 = v
		}
		var _val34 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val34 = v
		}
		p.Success[_key33] = _val34
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllListResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllList_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteI64(int64(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetAllListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetAllListResult(%+v)", *p)
}

// Attributes:
//  - Type
type TimeStampServiceIncNewIDArgs struct {
	Type int32 `thrift:"type,1" json:"type"`
}

func NewTimeStampServiceIncNewIDArgs() *TimeStampServiceIncNewIDArgs {
	return &TimeStampServiceIncNewIDArgs{}
}

func (p *TimeStampServiceIncNewIDArgs) GetType() int32 {
	return p.Type
}
func (p *TimeStampServiceIncNewIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncNewIDArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceIncNewIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incNewID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncNewIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceIncNewIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncNewIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceIncNewIDResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceIncNewIDResult() *TimeStampServiceIncNewIDResult {
	return &TimeStampServiceIncNewIDResult{}
}

var TimeStampServiceIncNewIDResult_Success_DEFAULT int64

func (p *TimeStampServiceIncNewIDResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TimeStampServiceIncNewIDResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TimeStampServiceIncNewIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceIncNewIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceIncNewIDResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TimeStampServiceIncNewIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("incNewID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceIncNewIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceIncNewIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceIncNewIDResult(%+v)", *p)
}

// Attributes:
//  - Type
type TimeStampServiceGetNewIDArgs struct {
	Type int32 `thrift:"type,1" json:"type"`
}

func NewTimeStampServiceGetNewIDArgs() *TimeStampServiceGetNewIDArgs {
	return &TimeStampServiceGetNewIDArgs{}
}

func (p *TimeStampServiceGetNewIDArgs) GetType() int32 {
	return p.Type
}
func (p *TimeStampServiceGetNewIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetNewIDArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *TimeStampServiceGetNewIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNewID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetNewIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetNewIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetNewIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetNewIDResult struct {
	Success *int64 `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetNewIDResult() *TimeStampServiceGetNewIDResult {
	return &TimeStampServiceGetNewIDResult{}
}

var TimeStampServiceGetNewIDResult_Success_DEFAULT int64

func (p *TimeStampServiceGetNewIDResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return TimeStampServiceGetNewIDResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *TimeStampServiceGetNewIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetNewIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetNewIDResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *TimeStampServiceGetNewIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getNewID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetNewIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetNewIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetNewIDResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
//  - ListType
type TimeStampServiceGetAllTimestampArgs struct {
	ID       int64   `thrift:"ID,1" json:"ID"`
	Type     []int32 `thrift:"type,2" json:"type"`
	ListType []int32 `thrift:"listType,3" json:"listType"`
}

func NewTimeStampServiceGetAllTimestampArgs() *TimeStampServiceGetAllTimestampArgs {
	return &TimeStampServiceGetAllTimestampArgs{}
}

func (p *TimeStampServiceGetAllTimestampArgs) GetID() int64 {
	return p.ID
}

func (p *TimeStampServiceGetAllTimestampArgs) GetType() []int32 {
	return p.Type
}

func (p *TimeStampServiceGetAllTimestampArgs) GetListType() []int32 {
	return p.ListType
}
func (p *TimeStampServiceGetAllTimestampArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Type = tSlice
	for i := 0; i < size; i++ {
		var _elem35 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem35 = v
		}
		p.Type = append(p.Type, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.ListType = tSlice
	for i := 0; i < size; i++ {
		var _elem36 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem36 = v
		}
		p.ListType = append(p.ListType, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllTimestamp_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetAllTimestampArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.Type)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Type {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetAllTimestampArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("listType", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:listType: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.I32, len(p.ListType)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ListType {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:listType: ", p), err)
	}
	return err
}

func (p *TimeStampServiceGetAllTimestampArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetAllTimestampArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TimeStampServiceGetAllTimestampResult struct {
	Success *TimestampResult_ `thrift:"success,0" json:"success,omitempty"`
}

func NewTimeStampServiceGetAllTimestampResult() *TimeStampServiceGetAllTimestampResult {
	return &TimeStampServiceGetAllTimestampResult{}
}

var TimeStampServiceGetAllTimestampResult_Success_DEFAULT *TimestampResult_

func (p *TimeStampServiceGetAllTimestampResult) GetSuccess() *TimestampResult_ {
	if !p.IsSetSuccess() {
		return TimeStampServiceGetAllTimestampResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TimeStampServiceGetAllTimestampResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TimeStampServiceGetAllTimestampResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &TimestampResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getAllTimestamp_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TimeStampServiceGetAllTimestampResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *TimeStampServiceGetAllTimestampResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TimeStampServiceGetAllTimestampResult(%+v)", *p)
}
