// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package vrv

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - Name
//  - ArgsNum
//  - ArgsType
type BizMethodInfo struct {
	Name     string   `thrift:"name,1" json:"name"`
	ArgsNum  int8     `thrift:"argsNum,2" json:"argsNum"`
	ArgsType []string `thrift:"argsType,3" json:"argsType"`
}

func NewBizMethodInfo() *BizMethodInfo {
	return &BizMethodInfo{}
}

func (p *BizMethodInfo) GetName() string {
	return p.Name
}

func (p *BizMethodInfo) GetArgsNum() int8 {
	return p.ArgsNum
}

func (p *BizMethodInfo) GetArgsType() []string {
	return p.ArgsType
}
func (p *BizMethodInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BizMethodInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *BizMethodInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.ArgsNum = temp
	}
	return nil
}

func (p *BizMethodInfo) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.ArgsType = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.ArgsType = append(p.ArgsType, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BizMethodInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BizMethodInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BizMethodInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err)
	}
	return err
}

func (p *BizMethodInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argsNum", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:argsNum: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.ArgsNum)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.argsNum (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:argsNum: ", p), err)
	}
	return err
}

func (p *BizMethodInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argsType", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:argsType: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ArgsType)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.ArgsType {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:argsType: ", p), err)
	}
	return err
}

func (p *BizMethodInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizMethodInfo(%+v)", *p)
}

// Attributes:
//  - TotalCount
//  - SuccessCount
//  - FailureCount
//  - SuccessAverageTime
//  - SuccessMinTime
//  - SuccessMaxTime
type BizMethodInvokeInfo struct {
	TotalCount         int64 `thrift:"totalCount,1" json:"totalCount"`
	SuccessCount       int64 `thrift:"successCount,2" json:"successCount"`
	FailureCount       int64 `thrift:"failureCount,3" json:"failureCount"`
	SuccessAverageTime int64 `thrift:"successAverageTime,4" json:"successAverageTime"`
	SuccessMinTime     int64 `thrift:"successMinTime,5" json:"successMinTime"`
	SuccessMaxTime     int64 `thrift:"successMaxTime,6" json:"successMaxTime"`
}

func NewBizMethodInvokeInfo() *BizMethodInvokeInfo {
	return &BizMethodInvokeInfo{}
}

func (p *BizMethodInvokeInfo) GetTotalCount() int64 {
	return p.TotalCount
}

func (p *BizMethodInvokeInfo) GetSuccessCount() int64 {
	return p.SuccessCount
}

func (p *BizMethodInvokeInfo) GetFailureCount() int64 {
	return p.FailureCount
}

func (p *BizMethodInvokeInfo) GetSuccessAverageTime() int64 {
	return p.SuccessAverageTime
}

func (p *BizMethodInvokeInfo) GetSuccessMinTime() int64 {
	return p.SuccessMinTime
}

func (p *BizMethodInvokeInfo) GetSuccessMaxTime() int64 {
	return p.SuccessMaxTime
}
func (p *BizMethodInvokeInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BizMethodInvokeInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TotalCount = v
	}
	return nil
}

func (p *BizMethodInvokeInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SuccessCount = v
	}
	return nil
}

func (p *BizMethodInvokeInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.FailureCount = v
	}
	return nil
}

func (p *BizMethodInvokeInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.SuccessAverageTime = v
	}
	return nil
}

func (p *BizMethodInvokeInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SuccessMinTime = v
	}
	return nil
}

func (p *BizMethodInvokeInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.SuccessMaxTime = v
	}
	return nil
}

func (p *BizMethodInvokeInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BizMethodInvokeInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BizMethodInvokeInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("totalCount", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TotalCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.totalCount (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalCount: ", p), err)
	}
	return err
}

func (p *BizMethodInvokeInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successCount", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:successCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SuccessCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.successCount (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:successCount: ", p), err)
	}
	return err
}

func (p *BizMethodInvokeInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failureCount", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:failureCount: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.FailureCount)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.failureCount (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:failureCount: ", p), err)
	}
	return err
}

func (p *BizMethodInvokeInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successAverageTime", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:successAverageTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SuccessAverageTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.successAverageTime (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:successAverageTime: ", p), err)
	}
	return err
}

func (p *BizMethodInvokeInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successMinTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:successMinTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SuccessMinTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.successMinTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:successMinTime: ", p), err)
	}
	return err
}

func (p *BizMethodInvokeInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("successMaxTime", thrift.I64, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:successMaxTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SuccessMaxTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.successMaxTime (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:successMaxTime: ", p), err)
	}
	return err
}

func (p *BizMethodInvokeInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizMethodInvokeInfo(%+v)", *p)
}
