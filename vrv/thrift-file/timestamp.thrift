include "vrv.thrift"
namespace java com.vrv.im.service
namespace cpp com.vrv.im.service
namespace go vrv.im.service.timestamp

  /**
   *********************************基本时间戳类型***************************
   *1：个人基本信息
   *2：隐藏账号设置信息
   *3：个人验证请求信息
   *4：个人验响应信息
   *5：个人基本设置开关信息
   *6：普通群组
   *7：好友推荐
   *8：群邀请信息
   *9：群验证信息
   *10：群响应信息
   *11: 企业组织机构时间戳
   *12: 企业列表时间戳
   *13：企业应用时间戳
   *14：企业基本信息时间戳
   *15：外部群通知时间戳
   *16：个人资料是否公开：生日,电话,邮件
   *17：黑名单设置
   *18：个人勿扰设置
   *19：全局勿扰设置
   *20: 团队组织公开设置
   *21: 人员白名单设置
   *22: 机器人时间戳
   *23: 数据字典时间戳
   *50：推送消息
   */

  /**
   *********************************页码时间戳类型***************************
   *121: 好友页码
   *122: 表情页码
   *123: 群成员页码
   *124: 群文件页码
   */

struct TimestampResult{
   1:optional list<i64> timestamps; /*时间戳结果列表*/
   2:optional list<i64> buddytimestamps; /*好友所有的page的时间戳*/
}

service TimeStampService extends vrv.VRVService {
  /**
   *********************************添加或者更新时间戳******************************************
   *根据某ID，获取某类型添加或者更新后的时间戳ID
   *参数：ID：涉及需要更新的ID，type：类型
   *      ID:   目前比如：userID或者企业ID
   *      type：类型
   *返回：添加或者更新后的时间戳
   *                      根据ID和type到数据库里面查询
   *                      |                                        |
   *                    有|                                    没有|
   *            将获取到的时间戳+1，更新           由10开始，生成时间戳，并将ID和type一起存储
   *            存储。                                             |
   *                      |                                        |
   *                      |                                  返回新的时间戳
   *               返回新的时间戳
   */
  i64 incSingle(1: i64 ID, 2: i32 type)

  /**
   *********************************获取时间戳***************************************************
   *根据某ID，获取某类型的时间戳ID
   *参数：ID：涉及需要更新的ID，type：类型
   *      ID:   目前比如：userID
   *      type：类型
   *返回：获取的时间戳
   *                      根据ID和type到数据库里面查询
   *                      |                                        |
   *                    有|                                    没有|
   *            返回获取到的时间戳                           时间戳返回1
   *
   */
  i64 getSingle(1: i64 ID, 2: i32 type)

  /**
   *********************************批量获取时间戳***************************************************
   *根据某ID，获取批量类型的时间戳ID，用户登录的时候调用
   *参数：ID：涉及需要更新的ID，type：批量类型
   *      ID:   目前比如：userID
   *      type：类型
   *返回：获取各个类型的时间戳
   *                    根据ID和type到数据库里面查询，遍历查询或者批量查询均可，
   *                    注意没有查到的类型， 时间戳返回1.
   *                            |
   *                            |
   *                    返回获取到的时间戳列表。
   *
   */
  list<i64> getBatch(1: i64 ID, 2: list<i32> type)

  /**
   *********************************添加或者更新页码或者组织架构时间戳*****************************
   *根据某ID，某类型，获取某页添加或者更新后的时间戳ID
   *主要是用户好友页码的时间戳和用户表情的时间戳
   *参数：ID：涉及需要更新的ID，目前比如：userID，groupID, enterpriseID
   *      type：类型，比如：121：好友页码，122：表情页码,123：群成员页码, 11: 企业组织机构时间戳
   *      subID：二级ID(页码或者组织架构ID)
   *返回：添加或者更新后的时间戳
   *                      根据ID、type和subID到数据库里面查询
   *                      |                                        |
   *                    有|                                    没有|
   *            将获取到的时间戳+1，更新           由10开始，生成时间戳，并将ID、type和subID一起存储
   *            存储。                                             |
   *                      |                                        |
   *                      |                                  返回新的时间戳
   *               返回新的时间戳
   */
  i64 incList(1: i64 ID, 2: i32 type, 3: i64 subID)

  /**
   **************************************批量更新时间戳*******************************************
   *批量更新时间戳
   *参数：ID：类型, type：类型, sublist: subid的集合
   *返回：更新后的时间戳列表
   *
   */
  list<i64> incBatchList(1: i64 ID, 2: i32 type, 3: list<i64> sublist)

  /**
   **************************************删除该ID，类型的所有时间戳*******************************
   *删除该ID，类型的所有时间戳
   *参数：ID：类型, type：类型
   *返回：无
   *
   */
   void delList(1: i64 ID, 2: i32 type)

  /**
   *********************************获取某页时间戳****************************************
   *根据某ID，某类型，获取某页的时间戳ID
   *主要是用户好友页码的时间戳和用户表情的时间戳
   *参数：ID：涉及需要更新的ID，目前比如：userID，enterpriseID
   *      type：类型，比如：121：好友页码，122：表情页码,123：群成员页码, 11: 企业组织机构时间戳
   *      subID：二级ID(页码或者组织架构ID)
   *返回：获取的时间戳
   *                      根据ID、type和subID到数据库里面查询
   *                      |                                        |
   *                    有|                                    没有|
   *            返回获取到的时间戳                           时间戳返回1
   *
   */
  i64 getList(1: i64 ID, 2: i32 type, 3: i64 subID)

  /**
   *********************************批量获取分页的时间戳**********************************************
   *根据某ID，某类型的批量页时间戳ID
   *参数：ID：涉及需要更新的ID，type：类型，subid：批量页码
   *      ID:   目前比如：userID
   *      type：类型，比如：121：好友页码，122：表情页码,123 群成员页码其他类型见ap.thrift的Timestamp
   *      subid: 批量页码
   *返回：获取各个页码的时间戳
   *                    根据ID、type和subid到数据库里面查询，遍历查询或者批量查询均可，
   *                    注意没有查到的subid，时间戳返回1.
   *                            |
   *                            |
   *                    返回获取到的时间戳列表。
   *
   */
  list<i64> getBatchList(1: i64 ID, 2: i32 type, 3: list<i64> sublist)

  /**
   **************************************根据ID,type获取所有二级时间戳集合*******************************
   *根据ID,type获取所有二级时间戳集合(页码时间戳，组织架构时间戳)
   *参数：ID：上级ID, type：类型
   *返回：map<i64,i64>：二级时间戳的map
   *
   */
  map<i64,i64> getAllList(1: i64 ID, 2: i32 type)

  /**
   *********************************添加或者更新某类型的时间戳****************************************
   *根据类型添加或者更新时间戳，主要是消息类
   *参数：type：类型
   *      type：类型，比如：201:消息，202：公告, 203: 群ID, 204: 注册用户ID 205:群邀请消息ID
   *                  206：群验证信息ID 207：群响应信息ID 208：推送消息ID 210:新鲜事ID 211:评论主体ID 212:
   *                  评论自身，213:相册 214:照片等,其他类型见ap.thrift的Timestamp
   *返回：添加或者更新的时间戳
   *                             根据type到数据库里面查询
   *                      |                                        |
   *                    有|                                    没有|
   *            将获取到的时间戳+1，更新           由10开始，生成时间戳，并将type一起存储
   *            存储。                                             |
   *                      |                                        |
   *                      |                                  返回新的时间戳
   *               返回新的时间戳
   */
  i64 incNewID(1: i32 type)
  /**
   **************************************获取某类型的时间戳*******************************************
   *根据类型获取时间戳，主要是消息类
   *参数：type：类型
   *      type：类型，比如：201:消息，202：公告, 203: 群ID, 204: 注册用户ID 205:群邀请消息ID
   *                  206：群验证信息ID 207：群响应信息ID 208：推送消息ID 210:新鲜事ID 211:评论主体ID
   *                  212:评论自身，213:相册 214:照片
   *返回：时间戳
   *                             根据type到数据库里面查询
   *                      |                                        |
   *                    有|                                    没有|
   *            返回获取到的时间戳                           时间戳返回1
   */
  i64 getNewID(1: i32 type)

  /**
   **************************************获取所有类型的时间戳*******************************************
   *根据传入的类型获取时间戳
   *参数：ID：ID， type：类型，listType：list时间戳类型，目前只有好友时间戳
   *返回：TimestampResult 包含getBatch得到的时间戳结果集和好友page时间戳集合
   *
   */
  TimestampResult getAllTimestamp(1: i64 ID, 2: list<i32> type, 3: list<i32> listType)

}
